{"ast":null,"code":"import _slicedToArray from \"/Users/macbook/Desktop/frontend-1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/macbook/Desktop/frontend-1/src/Developer_dash/ChangePass.jsx\";\nimport React, { Component, useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport jwt_decode from 'jwt-decode';\nimport axios from 'axios';\nimport Swal from 'sweetalert2/dist/sweetalert2.js';\nimport 'sweetalert2/src/sweetalert2.scss';\nimport { MDBContainer, MDBRow, MDBCol, MDBBtn, MDBInput } from 'mdbreact';\nimport { useFormik } from 'formik';\nimport { localhost } from '../GlobalVars';\nimport { Redirect } from 'react-router-dom';\nimport '../App.css';\n\nconst validate = values => {\n  const errors = {};\n\n  if (!values.password) {\n    errors.password = \"Required\";\n  }\n\n  if (!values.newPassword) {\n    errors.newPassword = \"Required\";\n  }\n\n  if (!values.cpassword) {\n    errors.cpassword = \"Required\";\n  } else {\n    if (values.cpassword !== values.newPassword) {\n      errors.cpassword = \"password doesn't match\";\n    }\n  }\n\n  return errors;\n};\n\nconst ChangepassForm = () => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        show = _useState2[0],\n        setShow = _useState2[1];\n\n  const formik = useFormik({\n    initialValues: {\n      password: '',\n      newpassword: '',\n      cpassword: ''\n    },\n    validate,\n    onSubmit: async values => {\n      axios.put(`${localhost}/user/changepass/${jwt_decode(localStorage.usertoken).user._id}`, {\n        password: values.password,\n        newPassword: values.newPassword\n      }).then(res => {\n        if (\"1\" == res.data) {\n          Swal.fire({\n            position: 'top-end',\n            icon: 'error',\n            title: 'Old password is not correct',\n            showConfirmButton: false,\n            timer: 1500\n          });\n        } else {\n          Swal.fire({\n            position: 'top-end',\n            icon: 'success',\n            title: 'Password changed successfully',\n            showConfirmButton: false,\n            timer: 1500\n          });\n          setShow(!show);\n        }\n      });\n    }\n  });\n  return React.createElement(MDBContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, show && React.createElement(Redirect, {\n    to: {\n      pathname: `/dashboard`\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }), React.createElement(MDBRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(MDBCol, {\n    md: \"6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"grey-text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(MDBInput, {\n    id: \"md-form label\",\n    label: \"Enter old password\",\n    id: \"password\",\n    name: \"password\",\n    validate: true,\n    type: \"password\",\n    onChange: formik.handleChange,\n    onBlur: formik.handleBlur,\n    value: formik.values.password,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }), formik.touched.password && formik.errors.password ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, formik.errors.password) : null, React.createElement(MDBInput, {\n    label: \"Enter new password\",\n    id: \"newPassword\",\n    name: \"newPassword\",\n    type: \"password\",\n    onChange: formik.handleChange,\n    onBlur: formik.handleBlur,\n    value: formik.values.lastname,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }), formik.touched.newPassword && formik.errors.newPassword ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, formik.errors.newPassword) : null, React.createElement(MDBInput, {\n    label: \"Confirm new password\",\n    id: \"cpassword\",\n    name: \"cpassword\",\n    type: \"password\",\n    onChange: formik.handleChange,\n    onBlur: formik.handleBlur,\n    value: formik.values.link,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }), formik.touched.cpassword && formik.errors.cpassword ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, formik.errors.cpassword) : null, React.createElement(MDBBtn, {\n    id: \"btn-primary\",\n    type: \"submit\",\n    color: \"primary\",\n    onClick: formik.handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, \"Submit\"))))));\n};\n\nexport default ChangepassForm;","map":{"version":3,"sources":["/Users/macbook/Desktop/frontend-1/src/Developer_dash/ChangePass.jsx"],"names":["React","Component","useState","Form","Button","Alert","jwt_decode","axios","Swal","MDBContainer","MDBRow","MDBCol","MDBBtn","MDBInput","useFormik","localhost","Redirect","validate","values","errors","password","newPassword","cpassword","ChangepassForm","show","setShow","formik","initialValues","newpassword","onSubmit","put","localStorage","usertoken","user","_id","then","res","data","fire","position","icon","title","showConfirmButton","timer","pathname","handleChange","handleBlur","touched","lastname","link","handleSubmit"],"mappings":"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","sourcesContent":["import React, { Component,useState } from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Form, Button, Alert } from 'react-bootstrap'\nimport jwt_decode from 'jwt-decode'\nimport axios from 'axios'\nimport Swal from 'sweetalert2/dist/sweetalert2.js'\nimport 'sweetalert2/src/sweetalert2.scss'\nimport { MDBContainer, MDBRow, MDBCol, MDBBtn, MDBInput } from 'mdbreact';\nimport { useFormik } from 'formik';\nimport { localhost } from '../GlobalVars'\nimport { Redirect } from 'react-router-dom'\nimport '../App.css';\n\nconst validate = values => {\n    const errors = {};\n    if (!values.password) {\n        errors.password = \"Required\"\n    }\n\n    if (!values.newPassword) {\n        errors.newPassword = \"Required\"\n    }\n\n    if (!values.cpassword) {\n        errors.cpassword = \"Required\"\n      } else {\n        if (values.cpassword !== values.newPassword) {\n          errors.cpassword = \"password doesn't match\"\n        }\n      }\n    return errors;\n};\n\nconst ChangepassForm = () => {\n\n    const [show, setShow] = useState(false);\n\n    const formik = useFormik({\n        initialValues: {\n            password: '',\n            newpassword:'',\n            cpassword:''\n        },\n        validate,\n        onSubmit: async (values) => {\n            axios.put(`${localhost}/user/changepass/${jwt_decode(localStorage.usertoken).user._id}`, {\n                password: values.password,\n                newPassword: values.newPassword\n            })\n                .then(res => {\n                    if (\"1\" == res.data) {\n\n                        Swal.fire({\n                            position: 'top-end',\n                            icon: 'error',\n                            title: 'Old password is not correct',\n                            showConfirmButton: false,\n                            timer: 1500\n                          })\n                      \n                    }\n                    else {\n                        Swal.fire({\n                            position: 'top-end',\n                            icon: 'success',\n                            title: 'Password changed successfully',\n                            showConfirmButton: false,\n                            timer: 1500\n                          })\n                          setShow(!show)\n                    }\n                })\n        },\n    });\n    return (\n        <MDBContainer>\n            {show && <Redirect to={{ pathname: `/dashboard` }} />}\n            <MDBRow>\n                <MDBCol md=\"6\">\n                    <form>\n                    <div className=\"grey-text\">\n            \n                        <MDBInput id=\"md-form label\"\n                            label=\"Enter old password\"\n                            id=\"password\"\n                            name=\"password\"\n                            validate\n                            type=\"password\"\n                            onChange={formik.handleChange}\n                            onBlur={formik.handleBlur}\n                            value={formik.values.password}\n                        />\n                        {formik.touched.password && formik.errors.password ? (\n                            <div>{formik.errors.password}</div>\n                        ) : null}\n                        <MDBInput\n                            label=\"Enter new password\"\n                            id=\"newPassword\"\n                            name=\"newPassword\"\n                            type=\"password\"\n                            onChange={formik.handleChange}\n                            onBlur={formik.handleBlur}\n                            value={formik.values.lastname}\n                        />\n                        {formik.touched.newPassword && formik.errors.newPassword ? (\n                            <div>{formik.errors.newPassword}</div>\n                        ) : null}\n                        <MDBInput\n                            label=\"Confirm new password\"\n                            id=\"cpassword\"\n                            name=\"cpassword\"\n                            type=\"password\"\n                            onChange={formik.handleChange}\n                            onBlur={formik.handleBlur}\n                            value={formik.values.link}\n                        />\n                        {formik.touched.cpassword && formik.errors.cpassword ? (\n                            <div>{formik.errors.cpassword}</div>\n                        ) : null}\n                        <MDBBtn id=\"btn-primary\" type=\"submit\" color=\"primary\" onClick={formik.handleSubmit}>Submit</MDBBtn>\n                        {/* <MDBBtn id=\"btn-primary\" type=\"submit\" color=\"primary\"  href =\"/\" >Go Back</MDBBtn> */}\n                        </div>\n                    </form>\n                </MDBCol>\n            </MDBRow>\n        </MDBContainer>\n    );\n};\n\n\nexport default ChangepassForm;\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}