{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Desktop/frontend-1/src/JobsComponents/JobsList.jsx\";\nimport React, { Component } from 'react';\nimport JCards from \"./JobsCards\";\nimport TransitionGroup from 'react-transition-group/TransitionGroup';\nimport Autosuggest from 'react-autosuggest';\nimport Fade from 'react-reveal/Fade';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './jobs.css';\nimport Reveal from 'react-reveal/Reveal';\nimport { Col, Row, Container, Button } from 'react-bootstrap';\nimport { Slider, Rail, Handles, Tracks, Ticks } from \"react-compound-slider\";\nimport { SliderRail, Handle, Track, Tick } from \"./SliderComponent\";\nimport Jobs from \"../Images/jobs.png\";\nexport default class JobsList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      var technologies = [];\n      this.state.jobFilter.forEach(item => {\n        item.technologies.map(tech => {\n          if (!technologies.includes(tech)) {\n            technologies.push(tech);\n          }\n        });\n      });\n      var max_val = Math.max.apply(Math, this.state.jobs.map(item => {\n        return item.price;\n      })); // var max_val = Math.max(5, 10, 20, 1100) //Math.max(...this.state.budgets)\n\n      var maxNum = this.maxDigit(max_val);\n      var domain = [0, maxNum];\n      const defaultValues = [0, maxNum];\n      this.setState({\n        tech: technologies,\n        sliderHandlesVal: defaultValues,\n        domain: domain\n      });\n    };\n\n    this.onChangeInput = (event, {\n      newValue\n    }) => {\n      this.setState({\n        value: newValue,\n        todo: newValue\n      });\n    };\n\n    this.onSuggestionsFetchRequested = ({\n      value\n    }) => {\n      this.setState({\n        suggestions: this.getSuggestions(value)\n      });\n    };\n\n    this.onSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n\n    this.getSuggestions = value => {\n      const inputValue = value.trim().toLowerCase();\n      const inputLength = inputValue.length;\n      return inputLength === 0 ? [] : this.state.tech.filter(tech => tech.toLowerCase().slice(0, inputLength) === inputValue);\n    };\n\n    this.getSuggestionValue = suggestion => suggestion;\n\n    this.renderSuggestion = suggestion => React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, suggestion);\n\n    this.add = async event => {\n      event.preventDefault();\n      await this.setState({\n        id: this.state.id + 1,\n        todos: [...this.state.todos, {\n          id: this.state.id,\n          text: this.state.todo || '-'\n        }],\n        todo: ''\n      });\n      var filteredJobs = [];\n      this.state.jobs.forEach(item => {\n        this.state.todos.some(val => {\n          if (item.technologies.indexOf(val.text) !== -1) {\n            if (!filteredJobs.includes(item)) {\n              filteredJobs.push(item);\n            }\n          }\n        });\n      });\n\n      if (this.state.jobBudgets.length > 0) {\n        if (this.state.jobBudgets !== this.state.jobs) filteredJobs = filteredJobs.filter(value => this.state.jobBudgets.includes(value));\n      }\n\n      this.setState({\n        jobFilter: filteredJobs,\n        jobSkill: filteredJobs\n      });\n    };\n\n    this.remove = async event => {\n      await this.setState({\n        todos: this.state.todos.filter(item => item.id !== +event.currentTarget.getAttribute('data-id'))\n      });\n\n      if (this.state.todos.length > 0) {\n        var filteredJobs = [];\n        this.state.jobs.forEach(item => {\n          this.state.todos.some(val => {\n            if (item.technologies.indexOf(val.text) !== -1) {\n              if (!filteredJobs.includes(item)) {\n                filteredJobs.push(item);\n              }\n            }\n          });\n        });\n        this.setState({\n          jobFilter: filteredJobs\n        });\n      } else {\n        this.setState({\n          jobFilter: this.state.jobs\n        });\n      }\n    };\n\n    this.pad = (n, width, z) => {\n      z = z || '0';\n      n = n + '';\n      return n.length >= width ? n : n + new Array(width - n.length + 1).join(z);\n    };\n\n    this.maxDigit = maxNum => {\n      var digits = maxNum.toString().length;\n      var divideBy = this.pad(1, digits);\n\n      if (maxNum % divideBy != 0) {\n        var roundedNum = Math.floor(maxNum / divideBy + 1) * divideBy;\n        return roundedNum;\n      } else {\n        return maxNum;\n      }\n    };\n\n    this.onChange = val => {\n      this.setState({\n        sliderHandlesVal: val\n      });\n      var temp = this.state.jobs.filter(item => {\n        if (val[0] <= item.price && item.price <= val[1]) {\n          return item;\n        }\n      });\n\n      if (this.state.jobSkill.length > 0) {\n        temp = temp.filter(value => this.state.jobSkill.includes(value));\n      }\n\n      this.setState({\n        jobFilter: temp,\n        jobBudgets: temp\n      });\n    };\n\n    this.showDetails = item => {\n      var showColContent = React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, item.title);\n      this.setState({\n        showColContent,\n        showCol: true\n      });\n    };\n\n    this.state = {\n      showColContent: null,\n      showCol: false,\n      jobBudgets: [],\n      jobSkill: [],\n      domain: [],\n      jobs: [{\n        title: \"job 1\",\n        description: \"description 1\",\n        price: 5000,\n        technologies: [\"ruby\", \"java\", \"html\"]\n      }, {\n        title: \"job 2\",\n        description: \"description 2\",\n        price: 2000,\n        technologies: [\"ruby\", \"java\", \"css\"]\n      }, {\n        title: \"job 3\",\n        description: \"description 3\",\n        price: 10000,\n        technologies: [\"javascript\", \"php\"]\n      }, {\n        title: \"job 4\",\n        description: \"description 4\",\n        price: 15000,\n        technologies: [\"ruby\", \"java\"]\n      }],\n      jobFilter: [{\n        title: \"job 1\",\n        description: \"description 1\",\n        price: 5000,\n        technologies: [\"ruby\", \"java\", \"html\"]\n      }, {\n        title: \"job 2\",\n        description: \"description 2\",\n        price: 20000,\n        technologies: [\"ruby\", \"java\", \"css\"]\n      }, {\n        title: \"job 3\",\n        description: \"description 3\",\n        price: 10000,\n        technologies: [\"javascript\", \"php\"]\n      }, {\n        title: \"job 4\",\n        description: \"description 4\",\n        price: 1500,\n        technologies: [\"ruby\", \"java\"]\n      }],\n      sliderHandlesVal: [],\n      tech: [],\n      value: '',\n      suggestions: [],\n      todo: '',\n      todos: [].map((text, id) => ({\n        id,\n        text\n      }))\n    };\n    this.state.id = this.state.todos.length;\n  }\n\n  render() {\n    const _this$state = this.state,\n          value = _this$state.value,\n          suggestions = _this$state.suggestions; // Autosuggest will pass through all these props to the input.\n\n    const inputProps = {\n      placeholder: 'Type a programming language',\n      value,\n      onChange: this.onChangeInput\n    };\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"imgBackground\",\n      style: {\n        height: 850\n      },\n      src: Jobs,\n      alt: \"Portfolio\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 3,\n      className: \"filterStyle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, \"Salary\"), this.state.sliderHandlesVal.length !== 0 && this.state.domain !== 0 && React.createElement(Slider, {\n      mode: 2,\n      step: 1,\n      domain: this.state.domain,\n      rootStyle: {\n        position: \"relative\",\n        width: \"100%\"\n      },\n      onUpdate: this.onUpdate,\n      onChange: this.onChange,\n      values: this.state.sliderHandlesVal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, React.createElement(Rail, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }, ({\n      getRailProps\n    }) => React.createElement(SliderRail, {\n      getRailProps: getRailProps,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    })), React.createElement(Handles, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, ({\n      handles,\n      getHandleProps\n    }) => React.createElement(\"div\", {\n      className: \"slider-handles\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, handles.map(handle => React.createElement(Handle, {\n      key: handle.id,\n      handle: handle,\n      domain: this.state.domain,\n      getHandleProps: getHandleProps,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    })))), React.createElement(Tracks, {\n      left: false,\n      right: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, ({\n      tracks,\n      getTrackProps\n    }) => React.createElement(\"div\", {\n      className: \"slider-tracks\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }, tracks.map(({\n      id,\n      source,\n      target\n    }) => React.createElement(Track, {\n      key: id,\n      source: source,\n      target: target,\n      getTrackProps: getTrackProps,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    })))), React.createElement(Ticks, {\n      count: 5,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }, ({\n      ticks\n    }) => React.createElement(\"div\", {\n      className: \"slider-ticks\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }, ticks.map(tick => React.createElement(Tick, {\n      key: tick.id,\n      tick: tick,\n      count: ticks.length,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    }))))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }, \"Skills\"), this.state.tech.length > 0 && React.createElement(\"form\", {\n      onSubmit: this.add,\n      autoComplete: \"off\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-12 mb-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }, React.createElement(TransitionGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }, this.state.todos.map(item => React.createElement(Fade, {\n      key: item.id,\n      collapse: true,\n      bottom: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card-body justify-content-between\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, item.text, React.createElement(\"button\", {\n      \"data-id\": item.id,\n      onClick: this.remove,\n      type: \"button\",\n      className: \"close\",\n      \"aria-label\": \"Close\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      \"aria-hidden\": \"true\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }, \"\\xD7\")))))))), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }, React.createElement(Autosuggest, {\n      style: {\n        background: \"red\"\n      },\n      type: \"text\",\n      id: \"todoField\",\n      name: \"todo\",\n      suggestions: suggestions,\n      onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n      getSuggestionValue: this.getSuggestionValue,\n      renderSuggestion: this.renderSuggestion,\n      inputProps: inputProps,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"input-group-append buttonThing \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.add,\n      className: \"btn btn-light\",\n      type: \"button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }, \" Add Item\"))))), React.createElement(Col, {\n      className: \"cardJob\",\n      md: this.state.showCol ? 5 : 7,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    }, this.state.jobFilter.map(item => {\n      return React.createElement(JCards, {\n        data: item,\n        showDetails: this.showDetails,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 350\n        },\n        __self: this\n      });\n    })), this.state.showCol !== false && this.state.showColContent !== null && React.createElement(Col, {\n      md: 3,\n      className: \"applyCard\",\n      style: {\n        height: \"30%\",\n        background: \"yellow\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357\n      },\n      __self: this\n    }, React.createElement(Fade, {\n      left: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359\n      },\n      __self: this\n    }, this.state.showColContent, React.createElement(Button, {\n      variant: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    }, \"Apply\"))))));\n  }\n\n}","map":{"version":3,"sources":["/Users/macbook/Desktop/frontend-1/src/JobsComponents/JobsList.jsx"],"names":["React","Component","JCards","TransitionGroup","Autosuggest","Fade","Reveal","Col","Row","Container","Button","Slider","Rail","Handles","Tracks","Ticks","SliderRail","Handle","Track","Tick","Jobs","JobsList","constructor","props","componentDidMount","technologies","state","jobFilter","forEach","item","map","tech","includes","push","max_val","Math","max","apply","jobs","price","maxNum","maxDigit","domain","defaultValues","setState","sliderHandlesVal","onChangeInput","event","newValue","value","todo","onSuggestionsFetchRequested","suggestions","getSuggestions","onSuggestionsClearRequested","inputValue","trim","toLowerCase","inputLength","length","filter","slice","getSuggestionValue","suggestion","renderSuggestion","add","preventDefault","id","todos","text","filteredJobs","some","val","indexOf","jobBudgets","jobSkill","remove","currentTarget","getAttribute","pad","n","width","z","Array","join","digits","toString","divideBy","roundedNum","floor","onChange","temp","showDetails","showColContent","title","showCol","description","render","inputProps","placeholder","height","position","onUpdate","getRailProps","handles","getHandleProps","handle","tracks","getTrackProps","source","target","ticks","tick","background"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport JCards from \"./JobsCards\"\nimport TransitionGroup from 'react-transition-group/TransitionGroup';\nimport Autosuggest from 'react-autosuggest';\nimport Fade from 'react-reveal/Fade';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './jobs.css'\nimport Reveal from 'react-reveal/Reveal';\nimport { Col, Row, Container, Button } from 'react-bootstrap';\nimport { Slider, Rail, Handles, Tracks, Ticks } from \"react-compound-slider\";\nimport { SliderRail, Handle, Track, Tick } from \"./SliderComponent\";\nimport Jobs from \"../Images/jobs.png\"\n\nexport default class JobsList extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            showColContent: null,\n            showCol: false,\n            jobBudgets: [],\n            jobSkill: [],\n            domain: [],\n            jobs: [{\n                title: \"job 1\",\n                description: \"description 1\",\n                price: 5000,\n                technologies: [\"ruby\", \"java\", \"html\"]\n            },\n            {\n                title: \"job 2\",\n                description: \"description 2\",\n                price: 2000,\n                technologies: [\"ruby\", \"java\", \"css\"]\n            },\n            {\n                title: \"job 3\",\n                description: \"description 3\",\n                price: 10000,\n                technologies: [\"javascript\", \"php\"]\n            },\n            {\n                title: \"job 4\",\n                description: \"description 4\",\n                price: 15000,\n                technologies: [\"ruby\", \"java\"]\n            }\n            ],\n            jobFilter: [{\n                title: \"job 1\",\n                description: \"description 1\",\n                price: 5000,\n                technologies: [\"ruby\", \"java\", \"html\"]\n            },\n            {\n                title: \"job 2\",\n                description: \"description 2\",\n                price: 20000,\n                technologies: [\"ruby\", \"java\", \"css\"]\n            },\n            {\n                title: \"job 3\",\n                description: \"description 3\",\n                price: 10000,\n                technologies: [\"javascript\", \"php\"]\n            },\n            {\n                title: \"job 4\",\n                description: \"description 4\",\n                price: 1500,\n                technologies: [\"ruby\", \"java\"]\n            }\n            ],\n            sliderHandlesVal: [],\n            tech: [],\n            value: '',\n            suggestions: [],\n            todo: '',\n            todos: [\n            ].map((text, id) => ({ id, text })),\n        };\n        this.state.id = this.state.todos.length;\n    }\n\n    componentDidMount = () => {\n        var technologies = []\n        this.state.jobFilter.forEach(item => {\n            item.technologies.map(tech => {\n                if (!technologies.includes(tech)) { technologies.push(tech) }\n            })\n        })\n\n\n\n        var max_val = Math.max.apply(Math, this.state.jobs.map(item => {\n            return item.price\n        }))\n        // var max_val = Math.max(5, 10, 20, 1100) //Math.max(...this.state.budgets)\n        var maxNum = this.maxDigit(max_val)\n        var domain = [0, maxNum];\n\n        const defaultValues = [0, maxNum];\n        this.setState({ tech: technologies, sliderHandlesVal: defaultValues, domain: domain })\n    }\n\n    //auto suggestion + filtering functions\n    onChangeInput = (event, { newValue }) => { this.setState({ value: newValue, todo: newValue }); };\n\n    onSuggestionsFetchRequested = ({ value }) => { this.setState({ suggestions: this.getSuggestions(value) }); };\n\n    onSuggestionsClearRequested = () => { this.setState({ suggestions: [] }); };\n\n    getSuggestions = value => {\n        const inputValue = value.trim().toLowerCase();\n        const inputLength = inputValue.length;\n\n        return inputLength === 0 ? [] : this.state.tech.filter(tech => tech.toLowerCase().slice(0, inputLength) === inputValue\n        );\n    };\n\n    getSuggestionValue = suggestion => suggestion;\n\n    renderSuggestion = suggestion => (<div>{suggestion}</div>);\n\n    add = async (event) => {\n        event.preventDefault();\n        await this.setState({\n            id: this.state.id + 1,\n            todos: [\n                ...this.state.todos,\n                { id: this.state.id, text: this.state.todo || '-' }\n            ],\n            todo: '',\n        });\n\n        var filteredJobs = []\n        this.state.jobs.forEach(item => {\n            this.state.todos.some(val => {\n                if (item.technologies.indexOf(val.text) !== -1) {\n                    if (!filteredJobs.includes(item)) {\n                        filteredJobs.push(item)\n                    }\n                }\n            })\n        })\n\n        if (this.state.jobBudgets.length > 0) {\n            if (this.state.jobBudgets !== this.state.jobs)\n                filteredJobs = filteredJobs.filter(value => this.state.jobBudgets.includes(value))\n        }\n        this.setState({ jobFilter: filteredJobs, jobSkill: filteredJobs })\n    }\n\n    remove = async (event) => {\n        await this.setState({\n            todos: this.state.todos.filter(item =>\n                item.id !== +event.currentTarget.getAttribute('data-id')\n            )\n        });\n\n        if (this.state.todos.length > 0) {\n            var filteredJobs = []\n            this.state.jobs.forEach(item => {\n                this.state.todos.some(val => {\n                    if (item.technologies.indexOf(val.text) !== -1) {\n                        if (!filteredJobs.includes(item)) {\n                            filteredJobs.push(item)\n                        }\n                    }\n                })\n            })\n            this.setState({ jobFilter: filteredJobs })\n        } else {\n            this.setState({ jobFilter: this.state.jobs })\n        }\n    }\n\n\n    //slider range functions\n    pad = (n, width, z) => {\n        z = z || '0';\n        n = n + '';\n        return n.length >= width ? n : n + new Array(width - n.length + 1).join(z);\n    }\n\n    maxDigit = (maxNum) => {\n        var digits = maxNum.toString().length\n        var divideBy = this.pad(1, digits)\n\n        if (maxNum % divideBy != 0) {\n            var roundedNum = Math.floor((maxNum / divideBy) + 1) * divideBy\n            return roundedNum\n        } else {\n            return maxNum\n        }\n\n    }\n\n    onChange = (val) => {\n        this.setState({ sliderHandlesVal: val })\n        var temp = this.state.jobs.filter(item => {\n            if (val[0] <= item.price && item.price <= val[1]) {\n                return item\n            }\n        })\n\n        if (this.state.jobSkill.length > 0) {\n            temp = temp.filter(value => this.state.jobSkill.includes(value))\n        }\n\n        this.setState({ jobFilter: temp, jobBudgets: temp })\n    }\n\n    ///show the details column\n    showDetails = (item) => {\n        var showColContent = <p>{item.title}</p>\n        this.setState({ showColContent, showCol: true })\n    }\n\n    render() {\n\n        const { value, suggestions } = this.state;\n\n        // Autosuggest will pass through all these props to the input.\n        const inputProps = {\n            placeholder: 'Type a programming language',\n            value,\n            onChange: this.onChangeInput\n        };\n\n        return (\n            <Container> \n\n<img  className=\"imgBackground\" style={{ height: 850 }} src={Jobs} alt=\"Portfolio\" /> \n                \n                <Row >\n                    {/* Filter column */}\n                    <Col md={3}  className=\"filterStyle\"  >\n                        <br />\n                        <h4>Salary</h4>\n\n                        {/* Slider code */}\n                        {this.state.sliderHandlesVal.length !== 0 &&\n                            this.state.domain !== 0 &&\n                            <Slider\n                                mode={2}\n                                step={1}\n                                domain={this.state.domain}\n                                rootStyle={{\n                                    position: \"relative\",\n                                    width: \"100%\"\n                                }}\n                                onUpdate={this.onUpdate}\n                                onChange={this.onChange}\n                                values={this.state.sliderHandlesVal}>\n                                <Rail>\n                                    {({ getRailProps }) => <SliderRail getRailProps={getRailProps} />}\n                                </Rail>\n                                <Handles>\n                                    {({ handles, getHandleProps }) => (\n                                        <div className=\"slider-handles\">\n                                            {handles.map(handle => (\n                                                <Handle\n                                                    key={handle.id}\n                                                    handle={handle}\n                                                    domain={this.state.domain}\n                                                    getHandleProps={getHandleProps}\n                                                />\n                                            ))}\n                                        </div>\n                                    )}\n                                </Handles>\n                                <Tracks left={false} right={false}>\n                                    {({ tracks, getTrackProps }) => (\n                                        <div className=\"slider-tracks\">\n                                            {tracks.map(({ id, source, target }) => (\n                                                <Track\n                                                    key={id}\n                                                    source={source}\n                                                    target={target}\n                                                    getTrackProps={getTrackProps}\n                                                />\n                                            ))}\n                                        </div>\n                                    )}\n                                </Tracks>\n                                <Ticks count={5}>\n                                    {({ ticks }) => (\n                                        <div className=\"slider-ticks\">\n                                            {ticks.map(tick => (\n                                                <Tick key={tick.id} tick={tick} count={ticks.length} />\n                                            ))}\n                                        </div>\n                                    )}\n                                </Ticks>\n                            </Slider>}\n                        <br />\n                        <br />\n\n                        {/* auto suggetion and animated filter cards code */}\n                        <h4>Skills</h4>\n                        {this.state.tech.length > 0 &&\n                            <form onSubmit={this.add} autoComplete=\"off\">\n                                <div className=\"col-12 mb-2\">\n                                    <TransitionGroup>\n                                        {this.state.todos.map((item) =>\n                                            <Fade key={item.id} collapse bottom>\n                                                <div className=\"card\">\n                                                    <div className=\"card-body justify-content-between\">\n                                                        {item.text}\n                                                        <button\n                                                            data-id={item.id}\n                                                            onClick={this.remove}\n                                                            type=\"button\"\n                                                            className=\"close\"\n                                                            aria-label=\"Close\">\n                                                                \n                                                            <span aria-hidden=\"true\">&times;</span>\n                                                        </button>\n                                                    </div>\n                                                </div>\n                                            </Fade>\n                                        )}\n                                    </TransitionGroup>\n                                </div>\n                                <Row>\n                                    <Autosuggest\n                                        style={{ background: \"red\" }}\n                                        type=\"text\"\n                                        id=\"todoField\"\n                                        name=\"todo\"\n                                        suggestions={suggestions}\n                                        onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n                                        onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n                                        getSuggestionValue={this.getSuggestionValue}\n                                        renderSuggestion={this.renderSuggestion}\n                                        inputProps={inputProps} />\n\n                                    <div className=\"input-group-append buttonThing \">\n    <button onClick={this.add} className=\"btn btn-light\" type=\"button\"> Add Item</button>\n                                    </div>\n                                </Row>\n                            </form>}\n                    </Col>\n\n\n                    {/* Cards column */}\n                    <Col  className=\"cardJob\" md={this.state.showCol ? 5 : 7} >\n                        {this.state.jobFilter.map(item => {\n                            return <JCards data={item} showDetails={this.showDetails} />\n                        })}\n                    </Col>\n\n\n                    {/* detail column */}\n                    {this.state.showCol !== false && this.state.showColContent !== null &&\n                        <Col md={3}  className=\"applyCard\" style={{ height: \"30%\",background: \"yellow\" }}>\n                            <Fade left>\n                                <div >\n                                    {this.state.showColContent}\n                                    <Button variant=\"primary\">Apply</Button>\n                                </div>\n                            </Fade>\n                        </Col>}\n                </Row>\n            </Container>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}